// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coordinator.proto

package coordinatorrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PrepareRequest struct {
	ToID                 string   `protobuf:"bytes,1,opt,name=toID,proto3" json:"toID,omitempty"`
	FromID               string   `protobuf:"bytes,2,opt,name=fromID,proto3" json:"fromID,omitempty"`
	TxID                 string   `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareRequest) Reset()         { *m = PrepareRequest{} }
func (m *PrepareRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareRequest) ProtoMessage()    {}
func (*PrepareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e779eb11ceee19, []int{0}
}

func (m *PrepareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareRequest.Unmarshal(m, b)
}
func (m *PrepareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareRequest.Marshal(b, m, deterministic)
}
func (m *PrepareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareRequest.Merge(m, src)
}
func (m *PrepareRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareRequest.Size(m)
}
func (m *PrepareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareRequest proto.InternalMessageInfo

func (m *PrepareRequest) GetToID() string {
	if m != nil {
		return m.ToID
	}
	return ""
}

func (m *PrepareRequest) GetFromID() string {
	if m != nil {
		return m.FromID
	}
	return ""
}

func (m *PrepareRequest) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

type PrepareReply struct {
	ToID                 string   `protobuf:"bytes,1,opt,name=toID,proto3" json:"toID,omitempty"`
	FromID               string   `protobuf:"bytes,2,opt,name=fromID,proto3" json:"fromID,omitempty"`
	TxID                 string   `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	WillToCommit         bool     `protobuf:"varint,4,opt,name=willToCommit,proto3" json:"willToCommit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareReply) Reset()         { *m = PrepareReply{} }
func (m *PrepareReply) String() string { return proto.CompactTextString(m) }
func (*PrepareReply) ProtoMessage()    {}
func (*PrepareReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e779eb11ceee19, []int{1}
}

func (m *PrepareReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareReply.Unmarshal(m, b)
}
func (m *PrepareReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareReply.Marshal(b, m, deterministic)
}
func (m *PrepareReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareReply.Merge(m, src)
}
func (m *PrepareReply) XXX_Size() int {
	return xxx_messageInfo_PrepareReply.Size(m)
}
func (m *PrepareReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareReply.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareReply proto.InternalMessageInfo

func (m *PrepareReply) GetToID() string {
	if m != nil {
		return m.ToID
	}
	return ""
}

func (m *PrepareReply) GetFromID() string {
	if m != nil {
		return m.FromID
	}
	return ""
}

func (m *PrepareReply) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *PrepareReply) GetWillToCommit() bool {
	if m != nil {
		return m.WillToCommit
	}
	return false
}

type DecideRequest struct {
	ToID                 string   `protobuf:"bytes,1,opt,name=toID,proto3" json:"toID,omitempty"`
	FromID               string   `protobuf:"bytes,2,opt,name=fromID,proto3" json:"fromID,omitempty"`
	TxID                 string   `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	Decision             int32    `protobuf:"varint,4,opt,name=decision,proto3" json:"decision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecideRequest) Reset()         { *m = DecideRequest{} }
func (m *DecideRequest) String() string { return proto.CompactTextString(m) }
func (*DecideRequest) ProtoMessage()    {}
func (*DecideRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e779eb11ceee19, []int{2}
}

func (m *DecideRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecideRequest.Unmarshal(m, b)
}
func (m *DecideRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecideRequest.Marshal(b, m, deterministic)
}
func (m *DecideRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecideRequest.Merge(m, src)
}
func (m *DecideRequest) XXX_Size() int {
	return xxx_messageInfo_DecideRequest.Size(m)
}
func (m *DecideRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DecideRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DecideRequest proto.InternalMessageInfo

func (m *DecideRequest) GetToID() string {
	if m != nil {
		return m.ToID
	}
	return ""
}

func (m *DecideRequest) GetFromID() string {
	if m != nil {
		return m.FromID
	}
	return ""
}

func (m *DecideRequest) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *DecideRequest) GetDecision() int32 {
	if m != nil {
		return m.Decision
	}
	return 0
}

type DecideReply struct {
	ToID                 string   `protobuf:"bytes,1,opt,name=toID,proto3" json:"toID,omitempty"`
	FromID               string   `protobuf:"bytes,2,opt,name=fromID,proto3" json:"fromID,omitempty"`
	TxID                 string   `protobuf:"bytes,3,opt,name=txID,proto3" json:"txID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecideReply) Reset()         { *m = DecideReply{} }
func (m *DecideReply) String() string { return proto.CompactTextString(m) }
func (*DecideReply) ProtoMessage()    {}
func (*DecideReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_99e779eb11ceee19, []int{3}
}

func (m *DecideReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecideReply.Unmarshal(m, b)
}
func (m *DecideReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecideReply.Marshal(b, m, deterministic)
}
func (m *DecideReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecideReply.Merge(m, src)
}
func (m *DecideReply) XXX_Size() int {
	return xxx_messageInfo_DecideReply.Size(m)
}
func (m *DecideReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DecideReply.DiscardUnknown(m)
}

var xxx_messageInfo_DecideReply proto.InternalMessageInfo

func (m *DecideReply) GetToID() string {
	if m != nil {
		return m.ToID
	}
	return ""
}

func (m *DecideReply) GetFromID() string {
	if m != nil {
		return m.FromID
	}
	return ""
}

func (m *DecideReply) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func init() {
	proto.RegisterType((*PrepareRequest)(nil), "PrepareRequest")
	proto.RegisterType((*PrepareReply)(nil), "PrepareReply")
	proto.RegisterType((*DecideRequest)(nil), "DecideRequest")
	proto.RegisterType((*DecideReply)(nil), "DecideReply")
}

func init() { proto.RegisterFile("coordinator.proto", fileDescriptor_99e779eb11ceee19) }

var fileDescriptor_99e779eb11ceee19 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xce, 0xcf, 0x2f,
	0x4a, 0xc9, 0xcc, 0x4b, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x0a, 0xe0,
	0xe2, 0x0b, 0x28, 0x4a, 0x2d, 0x48, 0x2c, 0x4a, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11,
	0x12, 0xe2, 0x62, 0x29, 0xc9, 0xf7, 0x74, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3,
	0x85, 0xc4, 0xb8, 0xd8, 0xd2, 0x8a, 0xf2, 0x73, 0x3d, 0x5d, 0x24, 0x98, 0xc0, 0xa2, 0x50, 0x1e,
	0x58, 0x6d, 0x85, 0xa7, 0x8b, 0x04, 0x33, 0x54, 0x6d, 0x85, 0xa7, 0x8b, 0x52, 0x11, 0x17, 0x0f,
	0xdc, 0xc4, 0x82, 0x9c, 0x4a, 0x4a, 0xcd, 0x13, 0x52, 0xe2, 0xe2, 0x29, 0xcf, 0xcc, 0xc9, 0x09,
	0xc9, 0x77, 0xce, 0xcf, 0xcd, 0xcd, 0x2c, 0x91, 0x60, 0x51, 0x60, 0xd4, 0xe0, 0x08, 0x42, 0x11,
	0x53, 0xca, 0xe6, 0xe2, 0x75, 0x49, 0x4d, 0xce, 0x4c, 0xa1, 0x96, 0x27, 0x84, 0xa4, 0xb8, 0x38,
	0x52, 0x52, 0x93, 0x33, 0x8b, 0x33, 0xf3, 0xf3, 0xc0, 0x16, 0xb2, 0x06, 0xc1, 0xf9, 0x4a, 0xbe,
	0x5c, 0xdc, 0x30, 0xcb, 0xa8, 0xe0, 0x3f, 0xa3, 0x04, 0x2e, 0x6e, 0x67, 0x44, 0xb4, 0x08, 0x69,
	0x72, 0xb1, 0x43, 0x83, 0x4f, 0x88, 0x5f, 0x0f, 0x35, 0x6a, 0xa4, 0x78, 0xf5, 0x50, 0x42, 0x56,
	0x8d, 0x8b, 0x0d, 0xe2, 0x10, 0x21, 0x3e, 0x3d, 0x14, 0xef, 0x4b, 0xf1, 0xe8, 0x21, 0xb9, 0xd0,
	0x49, 0x38, 0x4a, 0x50, 0x4f, 0x4f, 0x1f, 0x29, 0xee, 0x8b, 0x0a, 0x92, 0x93, 0xd8, 0xc0, 0xf1,
	0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x76, 0xf0, 0x98, 0x14, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoordinatorClient interface {
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareReply, error)
	Decide(ctx context.Context, in *DecideRequest, opts ...grpc.CallOption) (*DecideReply, error)
}

type coordinatorClient struct {
	cc *grpc.ClientConn
}

func NewCoordinatorClient(cc *grpc.ClientConn) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareReply, error) {
	out := new(PrepareReply)
	err := c.cc.Invoke(ctx, "/Coordinator/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Decide(ctx context.Context, in *DecideRequest, opts ...grpc.CallOption) (*DecideReply, error) {
	out := new(DecideReply)
	err := c.cc.Invoke(ctx, "/Coordinator/Decide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
type CoordinatorServer interface {
	Prepare(context.Context, *PrepareRequest) (*PrepareReply, error)
	Decide(context.Context, *DecideRequest) (*DecideReply, error)
}

// UnimplementedCoordinatorServer can be embedded to have forward compatible implementations.
type UnimplementedCoordinatorServer struct {
}

func (*UnimplementedCoordinatorServer) Prepare(ctx context.Context, req *PrepareRequest) (*PrepareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (*UnimplementedCoordinatorServer) Decide(ctx context.Context, req *DecideRequest) (*DecideReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decide not implemented")
}

func RegisterCoordinatorServer(s *grpc.Server, srv CoordinatorServer) {
	s.RegisterService(&_Coordinator_serviceDesc, srv)
}

func _Coordinator_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Coordinator/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Decide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Decide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Coordinator/Decide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Decide(ctx, req.(*DecideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coordinator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Coordinator_Prepare_Handler,
		},
		{
			MethodName: "Decide",
			Handler:    _Coordinator_Decide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator.proto",
}
